# Importing various packages
from random import random, seed
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
from matplotlib import cm
from matplotlib.ticker import LinearLocator, FormatStrFormatter
from random import randrange, uniform


def FrankeFunction(x,y):
    term1 = 0.75*np.exp(-(0.25*(9*x-2)**2) - 0.25*((9*y-2)**2))
    term2 = 0.75*np.exp(-((9*x+1)**2)/49.0 - 0.1*(9*y+1))
    term3 = 0.5*np.exp(-(9*x-7)**2/4.0 - 0.25*((9*y-3)**2))
    term4 = -0.2*np.exp(-(9*x-4)**2 - (9*y-7)**2)
    return term1 + term2 + term3 + term4

# Ordinary Least Square on the Franke function.
def OLS():

    #Make training data. Data set generated by FrankeFunction(x,y) where x,y E [0,1].
    #xtrain = np.arange(0, 1, 0.05)
    #ytrain = np.arange(0, 1, 0.05)
    #xtrain2 = [randint(0, 0.5) for p in range(0, 20)]
    #ytrain2 = [randint(0, 0.5) for p in range(0, 20)]
    xtrain3 = np.linspace(0, 0.5, num = 20)
    ytrain3 = np.linspace(0, 0.5, num = 20)
    #xtrain, ytrain = np.meshgrid(xtrain,ytrain)

    z = FrankeFunction(xtrain3, ytrain3)
    xyb = np.c_[np.ones((20, 1)), xtrain3, ytrain3, xtrain3*xtrain3, ytrain3*ytrain3, xtrain3*ytrain3]
    beta = np.linalg.inv(xyb.T.dot(xyb)).dot(xyb.T).dot(z)

    #Chose test data.
    xtest = np.arange(0, 1, 0.05)
    ytest = np.arange(0, 1, 0.05)
    xtest, ytest = np.meshgrid(xtest, ytest)
    xybnew = np.c_[np.ones(20,1), xtest, ytest, xtest*xtest, ytest*ytest, xtest*ytest]
    zpredict = xybnew.dot(beta)

    #Plot the surface- original
    xtrain, ytrain = np.meshgrid(xtrain,ytrain)
    surf = ax.plot_surface(xtrain ,ytrain , z, cmap=cm.coolwarm, linewidth=0, antialiased=False)

    #Plot surface - predicted
    #surfpredict = ax.plot_surface(xtest,ytest,zpredict, cmap=cm.coolwarm, linewidth=0, antialiased=False)

    #Customise the z axis
    ax.set_zlim(-0.10, 1.40)
    ax.zaxis.set_major_locator(LinearLocator(10))
    ax.zaxis.set_major_formatter(FormatStrFormaatter('%.02f'))

    #Add a color bar which maps values to colors
    fig.colorbar(surfpredict, shrink=0.5, aspect=5)
    plt.show()



    OLS()
